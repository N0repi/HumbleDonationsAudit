{"id":"ec00788bf9b1639fe436d9099e24ceca","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Sorts the pair (a, b) and hashes the result.\n     */\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"contracts/airdrop/AirdropHDT.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// AirdropHDT.sol\n\npragma solidity >=0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract AirdropHDT is Ownable {\n    IERC20 public token;\n    bytes32 public merkleRoot;\n    mapping(address => bool) public hasClaimed;\n\n    event TokensClaimed(address indexed claimant, uint256 amount);\n\n    // The constructor correctly calls the Ownable constructor\n    constructor(IERC20 _token, bytes32 _merkleRoot) Ownable(msg.sender) {\n        token = _token;\n        merkleRoot = _merkleRoot;\n    }\n\n    function claimTokens(uint256 amount, bytes32[] calldata merkleProof) external {\n        // *Add a require for insufficient contract balance*\n        require(!hasClaimed[msg.sender], \"Tokens already claimed\");\n\n        // Compute the leaf node hash (the hash of the recipient's address and the amount)\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, amount));\n\n        // Verify the proof against the stored Merkle root\n        require(MerkleProof.verify(merkleProof, merkleRoot, leaf), \"Invalid Merkle proof\");\n\n        // Mark the recipient as having claimed their tokens\n        hasClaimed[msg.sender] = true;\n\n        // Transfer the tokens to the recipient\n        require(token.transfer(msg.sender, amount), \"Token transfer failed\");\n\n        emit TokensClaimed(msg.sender, amount);\n    }\n\n    function withdrawToken(\n        address erc20Token,\n        uint256 amount\n    ) external onlyOwner {\n        require(erc20Token != address(0), \"Invalid ERC-20 token address\");\n        // Interact with the ERC-20 token contract to transfer tokens\n        IERC20 tokenContract = IERC20(erc20Token);\n        // Ensure the contract has a sufficient token balance\n        require(\n            tokenContract.balanceOf(address(this)) >= amount,\n            \"Insufficient token balance\"\n        );\n\n        // Transfer the ERC-20 tokens to the contract owner\n        require(\n            tokenContract.transfer(msg.sender, amount),\n            \"Token transfer failed\"\n        );\n    }\n    // Function to get the current Merkle Root\n    function getMerkleRoot() external view returns (bytes32) {\n        return merkleRoot;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout"],"":["ast"]}}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[255],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":256,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":255,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,255],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[225]},"id":226,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"132:70:1","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":225,"linearizedBaseContracts":[225],"name":"IERC20","nameLocation":"213:6:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"226:158:1","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":159,"name":"Transfer","nameLocation":"395:8:1","nodeType":"EventDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"420:4:1","nodeType":"VariableDeclaration","scope":159,"src":"404:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":155,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"442:2:1","nodeType":"VariableDeclaration","scope":159,"src":"426:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":157,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"454:5:1","nodeType":"VariableDeclaration","scope":159,"src":"446:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":156,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:57:1"},"src":"389:72:1"},{"anonymous":false,"documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"467:148:1","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":168,"name":"Approval","nameLocation":"626:8:1","nodeType":"EventDefinition","parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"651:5:1","nodeType":"VariableDeclaration","scope":168,"src":"635:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":164,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"674:7:1","nodeType":"VariableDeclaration","scope":168,"src":"658:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":166,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"691:5:1","nodeType":"VariableDeclaration","scope":168,"src":"683:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":165,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"634:63:1"},"src":"620:78:1"},{"documentation":{"id":169,"nodeType":"StructuredDocumentation","src":"704:65:1","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":174,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:1","nodeType":"FunctionDefinition","parameters":{"id":170,"nodeType":"ParameterList","parameters":[],"src":"794:2:1"},"returnParameters":{"id":173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":174,"src":"820:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":171,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:1"},"scope":225,"src":"774:55:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":175,"nodeType":"StructuredDocumentation","src":"835:71:1","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":182,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"920:9:1","nodeType":"FunctionDefinition","parameters":{"id":178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":177,"mutability":"mutable","name":"account","nameLocation":"938:7:1","nodeType":"VariableDeclaration","scope":182,"src":"930:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":176,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:17:1"},"returnParameters":{"id":181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":182,"src":"970:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":179,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"969:9:1"},"scope":225,"src":"911:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":183,"nodeType":"StructuredDocumentation","src":"985:213:1","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":192,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1212:8:1","nodeType":"FunctionDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"to","nameLocation":"1229:2:1","nodeType":"VariableDeclaration","scope":192,"src":"1221:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":184,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":187,"mutability":"mutable","name":"value","nameLocation":"1241:5:1","nodeType":"VariableDeclaration","scope":192,"src":"1233:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"1233:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:27:1"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":190,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":192,"src":"1266:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":189,"name":"bool","nodeType":"ElementaryTypeName","src":"1266:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1265:6:1"},"scope":225,"src":"1203:69:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":193,"nodeType":"StructuredDocumentation","src":"1278:264:1","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":202,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1556:9:1","nodeType":"FunctionDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":195,"mutability":"mutable","name":"owner","nameLocation":"1574:5:1","nodeType":"VariableDeclaration","scope":202,"src":"1566:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":194,"name":"address","nodeType":"ElementaryTypeName","src":"1566:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":197,"mutability":"mutable","name":"spender","nameLocation":"1589:7:1","nodeType":"VariableDeclaration","scope":202,"src":"1581:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":196,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1565:32:1"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":202,"src":"1621:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":199,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1620:9:1"},"scope":225,"src":"1547:83:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"1636:667:1","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":212,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2317:7:1","nodeType":"FunctionDefinition","parameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"spender","nameLocation":"2333:7:1","nodeType":"VariableDeclaration","scope":212,"src":"2325:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":204,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":207,"mutability":"mutable","name":"value","nameLocation":"2350:5:1","nodeType":"VariableDeclaration","scope":212,"src":"2342:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":206,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:32:1"},"returnParameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":212,"src":"2375:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":209,"name":"bool","nodeType":"ElementaryTypeName","src":"2375:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2374:6:1"},"scope":225,"src":"2308:73:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"2387:297:1","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":224,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2698:12:1","nodeType":"FunctionDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"from","nameLocation":"2719:4:1","nodeType":"VariableDeclaration","scope":224,"src":"2711:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":214,"name":"address","nodeType":"ElementaryTypeName","src":"2711:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":217,"mutability":"mutable","name":"to","nameLocation":"2733:2:1","nodeType":"VariableDeclaration","scope":224,"src":"2725:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":216,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":219,"mutability":"mutable","name":"value","nameLocation":"2745:5:1","nodeType":"VariableDeclaration","scope":224,"src":"2737:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":218,"name":"uint256","nodeType":"ElementaryTypeName","src":"2737:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2710:41:1"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":224,"src":"2770:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":221,"name":"bool","nodeType":"ElementaryTypeName","src":"2770:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2769:6:1"},"scope":225,"src":"2689:87:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":226,"src":"203:2575:1","usedErrors":[],"usedEvents":[159,168]}],"src":"106:2673:1"},"id":1},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[255]},"id":256,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":227,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:2"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"127:496:2","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":255,"linearizedBaseContracts":[255],"name":"Context","nameLocation":"642:7:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":236,"nodeType":"Block","src":"718:34:2","statements":[{"expression":{"expression":{"id":233,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:2","memberName":"sender","nodeType":"MemberAccess","src":"735:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":232,"id":235,"nodeType":"Return","src":"728:17:2"}]},"id":237,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:2","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[],"src":"675:2:2"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":237,"src":"709:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:2"},"scope":255,"src":"656:96:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":245,"nodeType":"Block","src":"825:32:2","statements":[{"expression":{"expression":{"id":242,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:2","memberName":"data","nodeType":"MemberAccess","src":"842:8:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":241,"id":244,"nodeType":"Return","src":"835:15:2"}]},"id":246,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:2","nodeType":"FunctionDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[],"src":"775:2:2"},"returnParameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":246,"src":"809:14:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":239,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:2"},"scope":255,"src":"758:99:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":253,"nodeType":"Block","src":"935:25:2","statements":[{"expression":{"hexValue":"30","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":250,"id":252,"nodeType":"Return","src":"945:8:2"}]},"id":254,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:2","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[],"src":"892:2:2"},"returnParameters":{"id":250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":254,"src":"926:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:2"},"scope":255,"src":"863:97:2","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":256,"src":"624:338:2","usedErrors":[],"usedEvents":[]}],"src":"101:862:2"},"id":2},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[792]},"id":793,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":257,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"118:24:3"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":258,"nodeType":"StructuredDocumentation","src":"144:658:3","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":792,"linearizedBaseContracts":[792],"name":"MerkleProof","nameLocation":"811:11:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"829:60:3","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":261,"name":"MerkleProofInvalidMultiproof","nameLocation":"900:28:3","nodeType":"ErrorDefinition","parameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"928:2:3"},"src":"894:37:3"},{"body":{"id":281,"nodeType":"Block","src":"1362:57:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":275,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"1392:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":276,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"1399:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":274,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"1379:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1379:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":278,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"1408:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1379:33:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":273,"id":280,"nodeType":"Return","src":"1372:40:3"}]},"documentation":{"id":262,"nodeType":"StructuredDocumentation","src":"937:323:3","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":282,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1274:6:3","nodeType":"FunctionDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":265,"mutability":"mutable","name":"proof","nameLocation":"1298:5:3","nodeType":"VariableDeclaration","scope":282,"src":"1281:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":263,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1281:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":264,"nodeType":"ArrayTypeName","src":"1281:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":267,"mutability":"mutable","name":"root","nameLocation":"1313:4:3","nodeType":"VariableDeclaration","scope":282,"src":"1305:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1305:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":269,"mutability":"mutable","name":"leaf","nameLocation":"1327:4:3","nodeType":"VariableDeclaration","scope":282,"src":"1319:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1319:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1280:52:3"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":282,"src":"1356:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":271,"name":"bool","nodeType":"ElementaryTypeName","src":"1356:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1355:6:3"},"scope":792,"src":"1265:154:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":302,"nodeType":"Block","src":"1589:65:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":296,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"1627:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":297,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":290,"src":"1634:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":295,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"1606:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1606:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":299,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"1643:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1606:41:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":294,"id":301,"nodeType":"Return","src":"1599:48:3"}]},"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"1425:52:3","text":" @dev Calldata version of {verify}"},"id":303,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1491:14:3","nodeType":"FunctionDefinition","parameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"proof","nameLocation":"1525:5:3","nodeType":"VariableDeclaration","scope":303,"src":"1506:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":284,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1506:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":285,"nodeType":"ArrayTypeName","src":"1506:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":288,"mutability":"mutable","name":"root","nameLocation":"1540:4:3","nodeType":"VariableDeclaration","scope":303,"src":"1532:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1532:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":290,"mutability":"mutable","name":"leaf","nameLocation":"1554:4:3","nodeType":"VariableDeclaration","scope":303,"src":"1546:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":289,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1546:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1505:54:3"},"returnParameters":{"id":294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":293,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":303,"src":"1583:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":292,"name":"bool","nodeType":"ElementaryTypeName","src":"1583:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1582:6:3"},"scope":792,"src":"1482:172:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":342,"nodeType":"Block","src":"2059:198:3","statements":[{"assignments":[315],"declarations":[{"constant":false,"id":315,"mutability":"mutable","name":"computedHash","nameLocation":"2077:12:3","nodeType":"VariableDeclaration","scope":342,"src":"2069:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2069:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":317,"initialValue":{"id":316,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"2092:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2069:27:3"},{"body":{"id":338,"nodeType":"Block","src":"2149:73:3","statements":[{"expression":{"id":336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":329,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"2163:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":331,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"2188:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":332,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2202:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":334,"indexExpression":{"id":333,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2208:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2202:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":330,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"2178:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2178:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2163:48:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":337,"nodeType":"ExpressionStatement","src":"2163:48:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":322,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2126:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":323,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2130:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2136:6:3","memberName":"length","nodeType":"MemberAccess","src":"2130:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2126:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":339,"initializationExpression":{"assignments":[319],"declarations":[{"constant":false,"id":319,"mutability":"mutable","name":"i","nameLocation":"2119:1:3","nodeType":"VariableDeclaration","scope":339,"src":"2111:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":318,"name":"uint256","nodeType":"ElementaryTypeName","src":"2111:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":321,"initialValue":{"hexValue":"30","id":320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2123:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2111:13:3"},"loopExpression":{"expression":{"id":327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2144:3:3","subExpression":{"id":326,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2144:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":328,"nodeType":"ExpressionStatement","src":"2144:3:3"},"nodeType":"ForStatement","src":"2106:116:3"},{"expression":{"id":340,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"2238:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":313,"id":341,"nodeType":"Return","src":"2231:19:3"}]},"documentation":{"id":304,"nodeType":"StructuredDocumentation","src":"1660:302:3","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted."},"id":343,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"1976:12:3","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"proof","nameLocation":"2006:5:3","nodeType":"VariableDeclaration","scope":343,"src":"1989:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":305,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1989:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":306,"nodeType":"ArrayTypeName","src":"1989:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"leaf","nameLocation":"2021:4:3","nodeType":"VariableDeclaration","scope":343,"src":"2013:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2013:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1988:38:3"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":343,"src":"2050:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":311,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2050:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2049:9:3"},"scope":792,"src":"1967:290:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":382,"nodeType":"Block","src":"2428:198:3","statements":[{"assignments":[355],"declarations":[{"constant":false,"id":355,"mutability":"mutable","name":"computedHash","nameLocation":"2446:12:3","nodeType":"VariableDeclaration","scope":382,"src":"2438:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2438:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":357,"initialValue":{"id":356,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"2461:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2438:27:3"},{"body":{"id":378,"nodeType":"Block","src":"2518:73:3","statements":[{"expression":{"id":376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":369,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"2532:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":371,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"2557:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":372,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"2571:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":374,"indexExpression":{"id":373,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"2577:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2571:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":370,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"2547:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2532:48:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":377,"nodeType":"ExpressionStatement","src":"2532:48:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":362,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"2495:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":363,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"2499:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2505:6:3","memberName":"length","nodeType":"MemberAccess","src":"2499:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2495:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":379,"initializationExpression":{"assignments":[359],"declarations":[{"constant":false,"id":359,"mutability":"mutable","name":"i","nameLocation":"2488:1:3","nodeType":"VariableDeclaration","scope":379,"src":"2480:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":358,"name":"uint256","nodeType":"ElementaryTypeName","src":"2480:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":361,"initialValue":{"hexValue":"30","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2492:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2480:13:3"},"loopExpression":{"expression":{"id":367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2513:3:3","subExpression":{"id":366,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"2513:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":368,"nodeType":"ExpressionStatement","src":"2513:3:3"},"nodeType":"ForStatement","src":"2475:116:3"},{"expression":{"id":380,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"2607:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":353,"id":381,"nodeType":"Return","src":"2600:19:3"}]},"documentation":{"id":344,"nodeType":"StructuredDocumentation","src":"2263:58:3","text":" @dev Calldata version of {processProof}"},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2335:20:3","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":347,"mutability":"mutable","name":"proof","nameLocation":"2375:5:3","nodeType":"VariableDeclaration","scope":383,"src":"2356:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2356:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":346,"nodeType":"ArrayTypeName","src":"2356:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":349,"mutability":"mutable","name":"leaf","nameLocation":"2390:4:3","nodeType":"VariableDeclaration","scope":383,"src":"2382:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2382:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2355:40:3"},"returnParameters":{"id":353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":383,"src":"2419:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":351,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2419:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2418:9:3"},"scope":792,"src":"2326:300:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":408,"nodeType":"Block","src":"3131:76:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":401,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"3166:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":402,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"3173:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":403,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"3185:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":400,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"3148:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3148:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":405,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"3196:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3148:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":399,"id":407,"nodeType":"Return","src":"3141:59:3"}]},"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"2632:312:3","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details."},"id":409,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"2958:16:3","nodeType":"FunctionDefinition","parameters":{"id":396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":387,"mutability":"mutable","name":"proof","nameLocation":"3001:5:3","nodeType":"VariableDeclaration","scope":409,"src":"2984:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2984:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":386,"nodeType":"ArrayTypeName","src":"2984:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"proofFlags","nameLocation":"3030:10:3","nodeType":"VariableDeclaration","scope":409,"src":"3016:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":388,"name":"bool","nodeType":"ElementaryTypeName","src":"3016:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":389,"nodeType":"ArrayTypeName","src":"3016:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"root","nameLocation":"3058:4:3","nodeType":"VariableDeclaration","scope":409,"src":"3050:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3050:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":395,"mutability":"mutable","name":"leaves","nameLocation":"3089:6:3","nodeType":"VariableDeclaration","scope":409,"src":"3072:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3072:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":394,"nodeType":"ArrayTypeName","src":"3072:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"2974:127:3"},"returnParameters":{"id":399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":398,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":409,"src":"3125:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":397,"name":"bool","nodeType":"ElementaryTypeName","src":"3125:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3124:6:3"},"scope":792,"src":"2949:258:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":434,"nodeType":"Block","src":"3574:84:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":427,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"3617:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":428,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"3624:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":429,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3636:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":426,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"3591:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3591:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":431,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3647:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3591:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":425,"id":433,"nodeType":"Return","src":"3584:67:3"}]},"documentation":{"id":410,"nodeType":"StructuredDocumentation","src":"3213:162:3","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details."},"id":435,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3389:24:3","nodeType":"FunctionDefinition","parameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"proof","nameLocation":"3442:5:3","nodeType":"VariableDeclaration","scope":435,"src":"3423:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":411,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3423:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":412,"nodeType":"ArrayTypeName","src":"3423:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"proofFlags","nameLocation":"3473:10:3","nodeType":"VariableDeclaration","scope":435,"src":"3457:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":414,"name":"bool","nodeType":"ElementaryTypeName","src":"3457:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":415,"nodeType":"ArrayTypeName","src":"3457:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"root","nameLocation":"3501:4:3","nodeType":"VariableDeclaration","scope":435,"src":"3493:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":417,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3493:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":421,"mutability":"mutable","name":"leaves","nameLocation":"3532:6:3","nodeType":"VariableDeclaration","scope":435,"src":"3515:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3515:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":420,"nodeType":"ArrayTypeName","src":"3515:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3413:131:3"},"returnParameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":435,"src":"3568:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":423,"name":"bool","nodeType":"ElementaryTypeName","src":"3568:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3567:6:3"},"scope":792,"src":"3380:278:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":594,"nodeType":"Block","src":"4574:2107:3","statements":[{"assignments":[451],"declarations":[{"constant":false,"id":451,"mutability":"mutable","name":"leavesLen","nameLocation":"4966:9:3","nodeType":"VariableDeclaration","scope":594,"src":"4958:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":450,"name":"uint256","nodeType":"ElementaryTypeName","src":"4958:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":454,"initialValue":{"expression":{"id":452,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"4978:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4985:6:3","memberName":"length","nodeType":"MemberAccess","src":"4978:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4958:33:3"},{"assignments":[456],"declarations":[{"constant":false,"id":456,"mutability":"mutable","name":"proofLen","nameLocation":"5009:8:3","nodeType":"VariableDeclaration","scope":594,"src":"5001:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"5001:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":459,"initialValue":{"expression":{"id":457,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"5020:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5026:6:3","memberName":"length","nodeType":"MemberAccess","src":"5020:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5001:31:3"},{"assignments":[461],"declarations":[{"constant":false,"id":461,"mutability":"mutable","name":"totalHashes","nameLocation":"5050:11:3","nodeType":"VariableDeclaration","scope":594,"src":"5042:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":460,"name":"uint256","nodeType":"ElementaryTypeName","src":"5042:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":464,"initialValue":{"expression":{"id":462,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"5064:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5075:6:3","memberName":"length","nodeType":"MemberAccess","src":"5064:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5042:39:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":465,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5129:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":466,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"5141:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5129:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":468,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"5153:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5167:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5153:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5129:39:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":476,"nodeType":"IfStatement","src":"5125:107:3","trueBody":{"id":475,"nodeType":"Block","src":"5170:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":472,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"5191:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5191:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":474,"nodeType":"RevertStatement","src":"5184:37:3"}]}},{"assignments":[481],"declarations":[{"constant":false,"id":481,"mutability":"mutable","name":"hashes","nameLocation":"5493:6:3","nodeType":"VariableDeclaration","scope":594,"src":"5476:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":479,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5476:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":480,"nodeType":"ArrayTypeName","src":"5476:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":487,"initialValue":{"arguments":[{"id":485,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"5516:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5502:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":482,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5506:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":483,"nodeType":"ArrayTypeName","src":"5506:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5502:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5476:52:3"},{"assignments":[489],"declarations":[{"constant":false,"id":489,"mutability":"mutable","name":"leafPos","nameLocation":"5546:7:3","nodeType":"VariableDeclaration","scope":594,"src":"5538:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":488,"name":"uint256","nodeType":"ElementaryTypeName","src":"5538:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":491,"initialValue":{"hexValue":"30","id":490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5556:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5538:19:3"},{"assignments":[493],"declarations":[{"constant":false,"id":493,"mutability":"mutable","name":"hashPos","nameLocation":"5575:7:3","nodeType":"VariableDeclaration","scope":594,"src":"5567:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":492,"name":"uint256","nodeType":"ElementaryTypeName","src":"5567:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":495,"initialValue":{"hexValue":"30","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5585:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5567:19:3"},{"assignments":[497],"declarations":[{"constant":false,"id":497,"mutability":"mutable","name":"proofPos","nameLocation":"5604:8:3","nodeType":"VariableDeclaration","scope":594,"src":"5596:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":496,"name":"uint256","nodeType":"ElementaryTypeName","src":"5596:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":499,"initialValue":{"hexValue":"30","id":498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5615:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5596:20:3"},{"body":{"id":558,"nodeType":"Block","src":"6034:292:3","statements":[{"assignments":[511],"declarations":[{"constant":false,"id":511,"mutability":"mutable","name":"a","nameLocation":"6056:1:3","nodeType":"VariableDeclaration","scope":558,"src":"6048:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":510,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6048:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":524,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":512,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"6060:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":513,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"6070:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6060:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":519,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"6102:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":522,"indexExpression":{"id":521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6109:9:3","subExpression":{"id":520,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"6109:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6102:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6060:59:3","trueExpression":{"baseExpression":{"id":515,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"6082:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":518,"indexExpression":{"id":517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6089:9:3","subExpression":{"id":516,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"6089:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6082:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6048:71:3"},{"assignments":[526],"declarations":[{"constant":false,"id":526,"mutability":"mutable","name":"b","nameLocation":"6141:1:3","nodeType":"VariableDeclaration","scope":558,"src":"6133:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6133:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":548,"initialValue":{"condition":{"baseExpression":{"id":527,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"6145:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":529,"indexExpression":{"id":528,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6156:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6145:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":543,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6257:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":546,"indexExpression":{"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6263:10:3","subExpression":{"id":544,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"6263:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6257:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6145:129:3","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":530,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"6178:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":531,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"6188:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6178:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":537,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"6220:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":540,"indexExpression":{"id":539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6227:9:3","subExpression":{"id":538,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"6227:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6220:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6178:59:3","trueExpression":{"baseExpression":{"id":533,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"6200:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":536,"indexExpression":{"id":535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6207:9:3","subExpression":{"id":534,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"6207:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6200:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6177:61:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6133:141:3"},{"expression":{"id":556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":549,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"6288:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":551,"indexExpression":{"id":550,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6295:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6288:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":553,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"6310:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":554,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"6313:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":552,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"6300:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6300:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6288:27:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":557,"nodeType":"ExpressionStatement","src":"6288:27:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":504,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6012:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":505,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"6016:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6012:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":559,"initializationExpression":{"assignments":[501],"declarations":[{"constant":false,"id":501,"mutability":"mutable","name":"i","nameLocation":"6005:1:3","nodeType":"VariableDeclaration","scope":559,"src":"5997:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":500,"name":"uint256","nodeType":"ElementaryTypeName","src":"5997:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":503,"initialValue":{"hexValue":"30","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6009:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5997:13:3"},"loopExpression":{"expression":{"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6029:3:3","subExpression":{"id":507,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6029:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":509,"nodeType":"ExpressionStatement","src":"6029:3:3"},"nodeType":"ForStatement","src":"5992:334:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":560,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"6340:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6340:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":579,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"6573:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6585:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6573:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":591,"nodeType":"Block","src":"6635:40:3","statements":[{"expression":{"baseExpression":{"id":587,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6656:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":589,"indexExpression":{"hexValue":"30","id":588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6662:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6656:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":449,"id":590,"nodeType":"Return","src":"6649:15:3"}]},"id":592,"nodeType":"IfStatement","src":"6569:106:3","trueBody":{"id":586,"nodeType":"Block","src":"6588:41:3","statements":[{"expression":{"baseExpression":{"id":582,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"6609:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":584,"indexExpression":{"hexValue":"30","id":583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6616:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6609:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":449,"id":585,"nodeType":"Return","src":"6602:16:3"}]}},"id":593,"nodeType":"IfStatement","src":"6336:339:3","trueBody":{"id":578,"nodeType":"Block","src":"6357:206:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":563,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"6375:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":564,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"6387:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6375:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":570,"nodeType":"IfStatement","src":"6371:96:3","trueBody":{"id":569,"nodeType":"Block","src":"6397:70:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":566,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6422:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6422:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":568,"nodeType":"RevertStatement","src":"6415:37:3"}]}},{"id":577,"nodeType":"UncheckedBlock","src":"6480:73:3","statements":[{"expression":{"baseExpression":{"id":571,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"6515:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":575,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":572,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"6522:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6536:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6522:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6515:23:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":449,"id":576,"nodeType":"Return","src":"6508:30:3"}]}]}}]},"documentation":{"id":436,"nodeType":"StructuredDocumentation","src":"3664:730:3","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer)."},"id":595,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4408:17:3","nodeType":"FunctionDefinition","parameters":{"id":446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"proof","nameLocation":"4452:5:3","nodeType":"VariableDeclaration","scope":595,"src":"4435:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":437,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4435:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":438,"nodeType":"ArrayTypeName","src":"4435:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":442,"mutability":"mutable","name":"proofFlags","nameLocation":"4481:10:3","nodeType":"VariableDeclaration","scope":595,"src":"4467:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":440,"name":"bool","nodeType":"ElementaryTypeName","src":"4467:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":441,"nodeType":"ArrayTypeName","src":"4467:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":445,"mutability":"mutable","name":"leaves","nameLocation":"4518:6:3","nodeType":"VariableDeclaration","scope":595,"src":"4501:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4501:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":444,"nodeType":"ArrayTypeName","src":"4501:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4425:105:3"},"returnParameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":448,"mutability":"mutable","name":"merkleRoot","nameLocation":"4562:10:3","nodeType":"VariableDeclaration","scope":595,"src":"4554:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4554:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4553:20:3"},"scope":792,"src":"4399:2282:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":754,"nodeType":"Block","src":"7043:2107:3","statements":[{"assignments":[611],"declarations":[{"constant":false,"id":611,"mutability":"mutable","name":"leavesLen","nameLocation":"7435:9:3","nodeType":"VariableDeclaration","scope":754,"src":"7427:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":610,"name":"uint256","nodeType":"ElementaryTypeName","src":"7427:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":614,"initialValue":{"expression":{"id":612,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"7447:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7454:6:3","memberName":"length","nodeType":"MemberAccess","src":"7447:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7427:33:3"},{"assignments":[616],"declarations":[{"constant":false,"id":616,"mutability":"mutable","name":"proofLen","nameLocation":"7478:8:3","nodeType":"VariableDeclaration","scope":754,"src":"7470:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":615,"name":"uint256","nodeType":"ElementaryTypeName","src":"7470:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":619,"initialValue":{"expression":{"id":617,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"7489:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7495:6:3","memberName":"length","nodeType":"MemberAccess","src":"7489:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7470:31:3"},{"assignments":[621],"declarations":[{"constant":false,"id":621,"mutability":"mutable","name":"totalHashes","nameLocation":"7519:11:3","nodeType":"VariableDeclaration","scope":754,"src":"7511:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":620,"name":"uint256","nodeType":"ElementaryTypeName","src":"7511:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":624,"initialValue":{"expression":{"id":622,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"7533:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7544:6:3","memberName":"length","nodeType":"MemberAccess","src":"7533:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7511:39:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":625,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"7598:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":626,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"7610:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7598:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":628,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"7622:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7636:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7622:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7598:39:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":636,"nodeType":"IfStatement","src":"7594:107:3","trueBody":{"id":635,"nodeType":"Block","src":"7639:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":632,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"7660:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7660:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"RevertStatement","src":"7653:37:3"}]}},{"assignments":[641],"declarations":[{"constant":false,"id":641,"mutability":"mutable","name":"hashes","nameLocation":"7962:6:3","nodeType":"VariableDeclaration","scope":754,"src":"7945:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":639,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7945:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":640,"nodeType":"ArrayTypeName","src":"7945:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":647,"initialValue":{"arguments":[{"id":645,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"7985:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7971:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":642,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7975:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":643,"nodeType":"ArrayTypeName","src":"7975:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7971:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7945:52:3"},{"assignments":[649],"declarations":[{"constant":false,"id":649,"mutability":"mutable","name":"leafPos","nameLocation":"8015:7:3","nodeType":"VariableDeclaration","scope":754,"src":"8007:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":648,"name":"uint256","nodeType":"ElementaryTypeName","src":"8007:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":651,"initialValue":{"hexValue":"30","id":650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8025:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8007:19:3"},{"assignments":[653],"declarations":[{"constant":false,"id":653,"mutability":"mutable","name":"hashPos","nameLocation":"8044:7:3","nodeType":"VariableDeclaration","scope":754,"src":"8036:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":652,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":655,"initialValue":{"hexValue":"30","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8054:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8036:19:3"},{"assignments":[657],"declarations":[{"constant":false,"id":657,"mutability":"mutable","name":"proofPos","nameLocation":"8073:8:3","nodeType":"VariableDeclaration","scope":754,"src":"8065:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":656,"name":"uint256","nodeType":"ElementaryTypeName","src":"8065:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":659,"initialValue":{"hexValue":"30","id":658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8084:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8065:20:3"},{"body":{"id":718,"nodeType":"Block","src":"8503:292:3","statements":[{"assignments":[671],"declarations":[{"constant":false,"id":671,"mutability":"mutable","name":"a","nameLocation":"8525:1:3","nodeType":"VariableDeclaration","scope":718,"src":"8517:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":670,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8517:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":684,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":672,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"8529:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":673,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"8539:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8529:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":679,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"8571:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":682,"indexExpression":{"id":681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8578:9:3","subExpression":{"id":680,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"8578:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8571:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8529:59:3","trueExpression":{"baseExpression":{"id":675,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"8551:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":678,"indexExpression":{"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8558:9:3","subExpression":{"id":676,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"8558:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8551:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8517:71:3"},{"assignments":[686],"declarations":[{"constant":false,"id":686,"mutability":"mutable","name":"b","nameLocation":"8610:1:3","nodeType":"VariableDeclaration","scope":718,"src":"8602:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":685,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8602:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":708,"initialValue":{"condition":{"baseExpression":{"id":687,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"8614:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":689,"indexExpression":{"id":688,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"8625:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8614:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":703,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"8726:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":706,"indexExpression":{"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8732:10:3","subExpression":{"id":704,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"8732:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8726:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8614:129:3","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":690,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"8647:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":691,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"8657:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8647:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":697,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"8689:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":700,"indexExpression":{"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8696:9:3","subExpression":{"id":698,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"8696:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8689:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8647:59:3","trueExpression":{"baseExpression":{"id":693,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"8669:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":696,"indexExpression":{"id":695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8676:9:3","subExpression":{"id":694,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"8676:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8669:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":702,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8646:61:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8602:141:3"},{"expression":{"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":709,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"8757:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":711,"indexExpression":{"id":710,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"8764:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8757:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":713,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"8779:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":714,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"8782:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":712,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"8769:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8769:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8757:27:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":717,"nodeType":"ExpressionStatement","src":"8757:27:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":664,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"8481:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":665,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"8485:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8481:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":719,"initializationExpression":{"assignments":[661],"declarations":[{"constant":false,"id":661,"mutability":"mutable","name":"i","nameLocation":"8474:1:3","nodeType":"VariableDeclaration","scope":719,"src":"8466:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":660,"name":"uint256","nodeType":"ElementaryTypeName","src":"8466:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":663,"initialValue":{"hexValue":"30","id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8478:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8466:13:3"},"loopExpression":{"expression":{"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8498:3:3","subExpression":{"id":667,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"8498:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":669,"nodeType":"ExpressionStatement","src":"8498:3:3"},"nodeType":"ForStatement","src":"8461:334:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":720,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"8809:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8823:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8809:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":739,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"9042:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9054:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9042:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":751,"nodeType":"Block","src":"9104:40:3","statements":[{"expression":{"baseExpression":{"id":747,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"9125:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":749,"indexExpression":{"hexValue":"30","id":748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9131:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9125:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":609,"id":750,"nodeType":"Return","src":"9118:15:3"}]},"id":752,"nodeType":"IfStatement","src":"9038:106:3","trueBody":{"id":746,"nodeType":"Block","src":"9057:41:3","statements":[{"expression":{"baseExpression":{"id":742,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"9078:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":744,"indexExpression":{"hexValue":"30","id":743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9085:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9078:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":609,"id":745,"nodeType":"Return","src":"9071:16:3"}]}},"id":753,"nodeType":"IfStatement","src":"8805:339:3","trueBody":{"id":738,"nodeType":"Block","src":"8826:206:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":723,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"8844:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":724,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"8856:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8844:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":730,"nodeType":"IfStatement","src":"8840:96:3","trueBody":{"id":729,"nodeType":"Block","src":"8866:70:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":726,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"8891:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8891:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":728,"nodeType":"RevertStatement","src":"8884:37:3"}]}},{"id":737,"nodeType":"UncheckedBlock","src":"8949:73:3","statements":[{"expression":{"baseExpression":{"id":731,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"8984:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":735,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":732,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"8991:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9005:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8991:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8984:23:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":609,"id":736,"nodeType":"Return","src":"8977:30:3"}]}]}}]},"documentation":{"id":596,"nodeType":"StructuredDocumentation","src":"6687:164:3","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details."},"id":755,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6865:25:3","nodeType":"FunctionDefinition","parameters":{"id":606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":599,"mutability":"mutable","name":"proof","nameLocation":"6919:5:3","nodeType":"VariableDeclaration","scope":755,"src":"6900:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6900:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":598,"nodeType":"ArrayTypeName","src":"6900:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":602,"mutability":"mutable","name":"proofFlags","nameLocation":"6950:10:3","nodeType":"VariableDeclaration","scope":755,"src":"6934:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":600,"name":"bool","nodeType":"ElementaryTypeName","src":"6934:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":601,"nodeType":"ArrayTypeName","src":"6934:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"leaves","nameLocation":"6987:6:3","nodeType":"VariableDeclaration","scope":755,"src":"6970:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":603,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6970:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":604,"nodeType":"ArrayTypeName","src":"6970:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6890:109:3"},"returnParameters":{"id":609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":608,"mutability":"mutable","name":"merkleRoot","nameLocation":"7031:10:3","nodeType":"VariableDeclaration","scope":755,"src":"7023:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":607,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7023:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7022:20:3"},"scope":792,"src":"6856:2294:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":778,"nodeType":"Block","src":"9301:75:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":765,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"9318:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":766,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"9322:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9318:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":773,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"9364:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":774,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"9367:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":772,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"9349:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9349:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9318:51:3","trueExpression":{"arguments":[{"id":769,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"9341:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":770,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"9344:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":768,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"9326:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9326:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":764,"id":777,"nodeType":"Return","src":"9311:58:3"}]},"documentation":{"id":756,"nodeType":"StructuredDocumentation","src":"9156:68:3","text":" @dev Sorts the pair (a, b) and hashes the result."},"id":779,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"9238:9:3","nodeType":"FunctionDefinition","parameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":758,"mutability":"mutable","name":"a","nameLocation":"9256:1:3","nodeType":"VariableDeclaration","scope":779,"src":"9248:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":757,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9248:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":760,"mutability":"mutable","name":"b","nameLocation":"9267:1:3","nodeType":"VariableDeclaration","scope":779,"src":"9259:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":759,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9259:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9247:22:3"},"returnParameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":779,"src":"9292:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":762,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9292:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9291:9:3"},"scope":792,"src":"9229:147:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":790,"nodeType":"Block","src":"9579:178:3","statements":[{"AST":{"nodeType":"YulBlock","src":"9641:110:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9662:4:3","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"9668:1:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9655:6:3"},"nodeType":"YulFunctionCall","src":"9655:15:3"},"nodeType":"YulExpressionStatement","src":"9655:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9690:4:3","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"9696:1:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9683:6:3"},"nodeType":"YulFunctionCall","src":"9683:15:3"},"nodeType":"YulExpressionStatement","src":"9683:15:3"},{"nodeType":"YulAssignment","src":"9711:30:3","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9730:4:3","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9736:4:3","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9720:9:3"},"nodeType":"YulFunctionCall","src":"9720:21:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9711:5:3"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":782,"isOffset":false,"isSlot":false,"src":"9668:1:3","valueSize":1},{"declaration":784,"isOffset":false,"isSlot":false,"src":"9696:1:3","valueSize":1},{"declaration":787,"isOffset":false,"isSlot":false,"src":"9711:5:3","valueSize":1}],"id":789,"nodeType":"InlineAssembly","src":"9632:119:3"}]},"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"9382:109:3","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":791,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9505:14:3","nodeType":"FunctionDefinition","parameters":{"id":785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":782,"mutability":"mutable","name":"a","nameLocation":"9528:1:3","nodeType":"VariableDeclaration","scope":791,"src":"9520:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9520:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":784,"mutability":"mutable","name":"b","nameLocation":"9539:1:3","nodeType":"VariableDeclaration","scope":791,"src":"9531:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":783,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9531:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9519:22:3"},"returnParameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":787,"mutability":"mutable","name":"value","nameLocation":"9572:5:3","nodeType":"VariableDeclaration","scope":791,"src":"9564:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":786,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9564:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9563:15:3"},"scope":792,"src":"9496:261:3","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":793,"src":"803:8956:3","usedErrors":[261],"usedEvents":[]}],"src":"118:9642:3"},"id":3},"contracts/airdrop/AirdropHDT.sol":{"ast":{"absolutePath":"contracts/airdrop/AirdropHDT.sol","exportedSymbols":{"AirdropHDT":[956],"Context":[255],"IERC20":[225],"MerkleProof":[792],"Ownable":[147]},"id":957,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":794,"literals":["solidity",">=","0.8",".20"],"nodeType":"PragmaDirective","src":"52:25:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":795,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":957,"sourceUnit":226,"src":"79:56:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":796,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":957,"sourceUnit":793,"src":"136:68:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":797,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":957,"sourceUnit":148,"src":"205:52:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":798,"name":"Ownable","nameLocations":["282:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"282:7:4"},"id":799,"nodeType":"InheritanceSpecifier","src":"282:7:4"}],"canonicalName":"AirdropHDT","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":956,"linearizedBaseContracts":[956,147,255],"name":"AirdropHDT","nameLocation":"268:10:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"fc0c546a","id":802,"mutability":"mutable","name":"token","nameLocation":"310:5:4","nodeType":"VariableDeclaration","scope":956,"src":"296:19:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"},"typeName":{"id":801,"nodeType":"UserDefinedTypeName","pathNode":{"id":800,"name":"IERC20","nameLocations":["296:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":225,"src":"296:6:4"},"referencedDeclaration":225,"src":"296:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"2eb4a7ab","id":804,"mutability":"mutable","name":"merkleRoot","nameLocation":"336:10:4","nodeType":"VariableDeclaration","scope":956,"src":"321:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":803,"name":"bytes32","nodeType":"ElementaryTypeName","src":"321:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"73b2e80e","id":808,"mutability":"mutable","name":"hasClaimed","nameLocation":"384:10:4","nodeType":"VariableDeclaration","scope":956,"src":"352:42:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":807,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":805,"name":"address","nodeType":"ElementaryTypeName","src":"360:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"352:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":806,"name":"bool","nodeType":"ElementaryTypeName","src":"371:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e430","id":814,"name":"TokensClaimed","nameLocation":"407:13:4","nodeType":"EventDefinition","parameters":{"id":813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":810,"indexed":true,"mutability":"mutable","name":"claimant","nameLocation":"437:8:4","nodeType":"VariableDeclaration","scope":814,"src":"421:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":809,"name":"address","nodeType":"ElementaryTypeName","src":"421:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":812,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"455:6:4","nodeType":"VariableDeclaration","scope":814,"src":"447:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":811,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"420:42:4"},"src":"401:62:4"},{"body":{"id":834,"nodeType":"Block","src":"600:65:4","statements":[{"expression":{"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":826,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"610:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":827,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"618:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"src":"610:14:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"id":829,"nodeType":"ExpressionStatement","src":"610:14:4"},{"expression":{"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":830,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"634:10:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":831,"name":"_merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"647:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"634:24:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":833,"nodeType":"ExpressionStatement","src":"634:24:4"}]},"id":835,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":822,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"588:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"592:6:4","memberName":"sender","nodeType":"MemberAccess","src":"588:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":824,"kind":"baseConstructorSpecifier","modifierName":{"id":821,"name":"Ownable","nameLocations":["580:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"580:7:4"},"nodeType":"ModifierInvocation","src":"580:19:4"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":817,"mutability":"mutable","name":"_token","nameLocation":"551:6:4","nodeType":"VariableDeclaration","scope":835,"src":"544:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"},"typeName":{"id":816,"nodeType":"UserDefinedTypeName","pathNode":{"id":815,"name":"IERC20","nameLocations":["544:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":225,"src":"544:6:4"},"referencedDeclaration":225,"src":"544:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":819,"mutability":"mutable","name":"_merkleRoot","nameLocation":"567:11:4","nodeType":"VariableDeclaration","scope":835,"src":"559:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":818,"name":"bytes32","nodeType":"ElementaryTypeName","src":"559:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"543:36:4"},"returnParameters":{"id":825,"nodeType":"ParameterList","parameters":[],"src":"600:0:4"},"scope":956,"src":"532:133:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":896,"nodeType":"Block","src":"749:729:4","statements":[{"expression":{"arguments":[{"id":848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"828:23:4","subExpression":{"baseExpression":{"id":844,"name":"hasClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"829:10:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":847,"indexExpression":{"expression":{"id":845,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"840:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"844:6:4","memberName":"sender","nodeType":"MemberAccess","src":"840:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"829:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e7320616c726561647920636c61696d6564","id":849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"853:24:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c0b89f4fb2200cb971cc72da0b4203780034112e935423892813b2b23e72a14b","typeString":"literal_string \"Tokens already claimed\""},"value":"Tokens already claimed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c0b89f4fb2200cb971cc72da0b4203780034112e935423892813b2b23e72a14b","typeString":"literal_string \"Tokens already claimed\""}],"id":843,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"820:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"820:58:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":851,"nodeType":"ExpressionStatement","src":"820:58:4"},{"assignments":[853],"declarations":[{"constant":false,"id":853,"mutability":"mutable","name":"leaf","nameLocation":"988:4:4","nodeType":"VariableDeclaration","scope":896,"src":"980:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":852,"name":"bytes32","nodeType":"ElementaryTypeName","src":"980:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":862,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":857,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1022:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1026:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1022:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":859,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"1034:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":855,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1005:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:12:4","memberName":"encodePacked","nodeType":"MemberAccess","src":"1005:16:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1005:36:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":854,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"995:9:4","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"995:47:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"980:62:4"},{"expression":{"arguments":[{"arguments":[{"id":866,"name":"merkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":840,"src":"1139:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":867,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"1152:10:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":868,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"1164:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":864,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"1120:11:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$792_$","typeString":"type(library MerkleProof)"}},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1132:6:4","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":282,"src":"1120:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1120:49:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964204d65726b6c652070726f6f66","id":870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1171:22:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_cfff98aea1f4314a786c0426b520c2e5600fd9bdeb9d59d5d51311c13153d3c6","typeString":"literal_string \"Invalid Merkle proof\""},"value":"Invalid Merkle proof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cfff98aea1f4314a786c0426b520c2e5600fd9bdeb9d59d5d51311c13153d3c6","typeString":"literal_string \"Invalid Merkle proof\""}],"id":863,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1112:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1112:82:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":872,"nodeType":"ExpressionStatement","src":"1112:82:4"},{"expression":{"id":878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":873,"name":"hasClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"1266:10:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":876,"indexExpression":{"expression":{"id":874,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1277:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1281:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1277:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1266:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1291:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1266:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":879,"nodeType":"ExpressionStatement","src":"1266:29:4"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":883,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1377:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1381:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1377:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":885,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"1389:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":881,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"1362:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1368:8:4","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":192,"src":"1362:14:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1362:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e207472616e73666572206661696c6564","id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1398:23:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""},"value":"Token transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""}],"id":880,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1354:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1354:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":889,"nodeType":"ExpressionStatement","src":"1354:68:4"},{"eventCall":{"arguments":[{"expression":{"id":891,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1452:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1456:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1452:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":893,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"1464:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":890,"name":"TokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"1438:13:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1438:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":895,"nodeType":"EmitStatement","src":"1433:38:4"}]},"functionSelector":"9a114cb2","id":897,"implemented":true,"kind":"function","modifiers":[],"name":"claimTokens","nameLocation":"680:11:4","nodeType":"FunctionDefinition","parameters":{"id":841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"amount","nameLocation":"700:6:4","nodeType":"VariableDeclaration","scope":897,"src":"692:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":836,"name":"uint256","nodeType":"ElementaryTypeName","src":"692:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":840,"mutability":"mutable","name":"merkleProof","nameLocation":"727:11:4","nodeType":"VariableDeclaration","scope":897,"src":"708:30:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":838,"name":"bytes32","nodeType":"ElementaryTypeName","src":"708:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":839,"nodeType":"ArrayTypeName","src":"708:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"691:48:4"},"returnParameters":{"id":842,"nodeType":"ParameterList","parameters":[],"src":"749:0:4"},"scope":956,"src":"671:807:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":946,"nodeType":"Block","src":"1584:577:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":907,"name":"erc20Token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"1602:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1624:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":908,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:4","typeDescriptions":{}}},"id":911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1616:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1602:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964204552432d323020746f6b656e2061646472657373","id":913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1628:30:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_8962e84a0fe1dc8bc8e99b98167ffc97f36dc867633c236c04dbcaebcfcef536","typeString":"literal_string \"Invalid ERC-20 token address\""},"value":"Invalid ERC-20 token address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8962e84a0fe1dc8bc8e99b98167ffc97f36dc867633c236c04dbcaebcfcef536","typeString":"literal_string \"Invalid ERC-20 token address\""}],"id":906,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1594:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1594:65:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":915,"nodeType":"ExpressionStatement","src":"1594:65:4"},{"assignments":[918],"declarations":[{"constant":false,"id":918,"mutability":"mutable","name":"tokenContract","nameLocation":"1746:13:4","nodeType":"VariableDeclaration","scope":946,"src":"1739:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"},"typeName":{"id":917,"nodeType":"UserDefinedTypeName","pathNode":{"id":916,"name":"IERC20","nameLocations":["1739:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":225,"src":"1739:6:4"},"referencedDeclaration":225,"src":"1739:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"visibility":"internal"}],"id":922,"initialValue":{"arguments":[{"id":920,"name":"erc20Token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"1769:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":919,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"1762:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$225_$","typeString":"type(contract IERC20)"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1762:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"1739:41:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":928,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1905:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_AirdropHDT_$956","typeString":"contract AirdropHDT"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AirdropHDT_$956","typeString":"contract AirdropHDT"}],"id":927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1897:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":926,"name":"address","nodeType":"ElementaryTypeName","src":"1897:7:4","typeDescriptions":{}}},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1897:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":924,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"1873:13:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1887:9:4","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":182,"src":"1873:23:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1873:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":931,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"1915:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1873:48:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420746f6b656e2062616c616e6365","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1935:28:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192","typeString":"literal_string \"Insufficient token balance\""},"value":"Insufficient token balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192","typeString":"literal_string \"Insufficient token balance\""}],"id":923,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1852:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1852:121:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":935,"nodeType":"ExpressionStatement","src":"1852:121:4"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":939,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2088:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2092:6:4","memberName":"sender","nodeType":"MemberAccess","src":"2088:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":941,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"2100:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":937,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"2065:13:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$225","typeString":"contract IERC20"}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2079:8:4","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":192,"src":"2065:22:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2065:42:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e207472616e73666572206661696c6564","id":943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2121:23:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""},"value":"Token transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4","typeString":"literal_string \"Token transfer failed\""}],"id":936,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2044:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2044:110:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":945,"nodeType":"ExpressionStatement","src":"2044:110:4"}]},"functionSelector":"9e281a98","id":947,"implemented":true,"kind":"function","modifiers":[{"id":904,"kind":"modifierInvocation","modifierName":{"id":903,"name":"onlyOwner","nameLocations":["1574:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"1574:9:4"},"nodeType":"ModifierInvocation","src":"1574:9:4"}],"name":"withdrawToken","nameLocation":"1493:13:4","nodeType":"FunctionDefinition","parameters":{"id":902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":899,"mutability":"mutable","name":"erc20Token","nameLocation":"1524:10:4","nodeType":"VariableDeclaration","scope":947,"src":"1516:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":898,"name":"address","nodeType":"ElementaryTypeName","src":"1516:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":901,"mutability":"mutable","name":"amount","nameLocation":"1552:6:4","nodeType":"VariableDeclaration","scope":947,"src":"1544:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":900,"name":"uint256","nodeType":"ElementaryTypeName","src":"1544:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1506:58:4"},"returnParameters":{"id":905,"nodeType":"ParameterList","parameters":[],"src":"1584:0:4"},"scope":956,"src":"1484:677:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":954,"nodeType":"Block","src":"2270:34:4","statements":[{"expression":{"id":952,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"2287:10:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":951,"id":953,"nodeType":"Return","src":"2280:17:4"}]},"functionSelector":"49590657","id":955,"implemented":true,"kind":"function","modifiers":[],"name":"getMerkleRoot","nameLocation":"2222:13:4","nodeType":"FunctionDefinition","parameters":{"id":948,"nodeType":"ParameterList","parameters":[],"src":"2235:2:4"},"returnParameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":955,"src":"2261:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":949,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2261:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2260:9:4"},"scope":956,"src":"2213:91:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":957,"src":"259:2047:4","usedErrors":[13,18],"usedEvents":[24,814]}],"src":"52:2255:4"},"id":4}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220565a113abde48d6df4f367bb5008d8361691ecfb5874d94aff300634ecb2965d64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP GAS GT GASPRICE 0xBD 0xE4 DUP14 PUSH14 0xF4F367BB5008D8361691ECFB5874 0xD9 0x4A SELFDESTRUCT ADDRESS MOD CALLVALUE 0xEC 0xB2 SWAP7 0x5D PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"803:8956:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;803:8956:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220565a113abde48d6df4f367bb5008d8361691ecfb5874d94aff300634ecb2965d64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP GAS GT GASPRICE 0xBD 0xE4 DUP14 PUSH14 0xF4F367BB5008D8361691ECFB5874 0xD9 0x4A SELFDESTRUCT ADDRESS MOD CALLVALUE 0xEC 0xB2 SWAP7 0x5D PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"803:8956:3:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5d3d47d35af4373743a559ea4b9b7ecfe4bab6f0703f410c1e59959b7966ac\",\"dweb:/ipfs/QmTHdoghh4WLu4yURjGEgRk162pcwwdsG52MPGa12GqnGR\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/airdrop/AirdropHDT.sol":{"AirdropHDT":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"bytes32","name":"_merkleRoot","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"claimant","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokensClaimed","type":"event"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"claimTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getMerkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"hasClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"merkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"erc20Token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_835":{"entryPoint":null,"id":835,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":136,"id":146,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_IERC20_$225t_bytes32_fromMemory":{"entryPoint":216,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:589:5","statements":[{"nodeType":"YulBlock","src":"6:3:5","statements":[]},{"body":{"nodeType":"YulBlock","src":"126:253:5","statements":[{"body":{"nodeType":"YulBlock","src":"172:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"181:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"184:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"174:6:5"},"nodeType":"YulFunctionCall","src":"174:12:5"},"nodeType":"YulExpressionStatement","src":"174:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"147:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"156:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"143:3:5"},"nodeType":"YulFunctionCall","src":"143:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"168:2:5","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"139:3:5"},"nodeType":"YulFunctionCall","src":"139:32:5"},"nodeType":"YulIf","src":"136:52:5"},{"nodeType":"YulVariableDeclaration","src":"197:29:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"216:9:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:5"},"nodeType":"YulFunctionCall","src":"210:16:5"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"201:5:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"289:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"298:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"301:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"291:6:5"},"nodeType":"YulFunctionCall","src":"291:12:5"},"nodeType":"YulExpressionStatement","src":"291:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"248:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"259:5:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:3:5","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"279:1:5","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"270:3:5"},"nodeType":"YulFunctionCall","src":"270:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"283:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"266:3:5"},"nodeType":"YulFunctionCall","src":"266:19:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"255:3:5"},"nodeType":"YulFunctionCall","src":"255:31:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"245:2:5"},"nodeType":"YulFunctionCall","src":"245:42:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"238:6:5"},"nodeType":"YulFunctionCall","src":"238:50:5"},"nodeType":"YulIf","src":"235:70:5"},{"nodeType":"YulAssignment","src":"314:15:5","value":{"name":"value","nodeType":"YulIdentifier","src":"324:5:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"314:6:5"}]},{"nodeType":"YulAssignment","src":"338:35:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"358:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"369:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"354:3:5"},"nodeType":"YulFunctionCall","src":"354:18:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"348:5:5"},"nodeType":"YulFunctionCall","src":"348:25:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"338:6:5"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$225t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"95:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"107:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"115:6:5","type":""}],"src":"14:365:5"},{"body":{"nodeType":"YulBlock","src":"485:102:5","statements":[{"nodeType":"YulAssignment","src":"495:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"507:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"503:3:5"},"nodeType":"YulFunctionCall","src":"503:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"495:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"537:9:5"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"552:6:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"568:3:5","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"573:1:5","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"564:3:5"},"nodeType":"YulFunctionCall","src":"564:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"577:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"560:3:5"},"nodeType":"YulFunctionCall","src":"560:19:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"548:3:5"},"nodeType":"YulFunctionCall","src":"548:32:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"530:6:5"},"nodeType":"YulFunctionCall","src":"530:51:5"},"nodeType":"YulExpressionStatement","src":"530:51:5"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"454:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"465:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"476:4:5","type":""}],"src":"384:203:5"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_IERC20_$225t_bytes32_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":5,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161098138038061098183398101604081905261002f916100d8565b338061005557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005e81610088565b50600180546001600160a01b0319166001600160a01b039390931692909217909155600255610112565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100eb57600080fd5b82516001600160a01b038116811461010257600080fd5b6020939093015192949293505050565b610860806101216000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100f95780639a114cb21461011e5780639e281a9814610131578063f2fde38b14610144578063fc0c546a1461015757600080fd5b80632eb4a7ab1461009857806349590657146100b4578063715018a6146100bc57806373b2e80e146100c6575b600080fd5b6100a160025481565b6040519081526020015b60405180910390f35b6002546100a1565b6100c461016a565b005b6100e96100d43660046106ee565b60036020526000908152604090205460ff1681565b60405190151581526020016100ab565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100ab565b6100c461012c366004610709565b61017e565b6100c461013f366004610788565b6103b0565b6100c46101523660046106ee565b610582565b600154610106906001600160a01b031681565b6101726105c0565b61017c60006105ed565b565b3360009081526003602052604090205460ff16156101dc5760405162461bcd60e51b8152602060048201526016602482015275151bdad95b9cc8185b1c9958591e4818db185a5b595960521b60448201526064015b60405180910390fd5b6040516bffffffffffffffffffffffff193360601b1660208201526034810184905260009060540160405160208183030381529060405280519060200120905061025d83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600254915084905061063d565b6102a05760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21026b2b935b63290383937b7b360611b60448201526064016101d3565b3360008181526003602052604090819020805460ff1916600190811790915554905163a9059cbb60e01b81526004810192909252602482018690526001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561030d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033191906107b2565b6103755760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016101d3565b60405184815233907f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4309060200160405180910390a250505050565b6103b86105c0565b6001600160a01b03821661040e5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964204552432d323020746f6b656e20616464726573730000000060448201526064016101d3565b6040516370a0823160e01b8152306004820152829082906001600160a01b038316906370a0823190602401602060405180830381865afa158015610456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047a91906107d4565b10156104c85760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e636500000000000060448201526064016101d3565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0382169063a9059cbb906044016020604051808303816000875af1158015610515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053991906107b2565b61057d5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016101d3565b505050565b61058a6105c0565b6001600160a01b0381166105b457604051631e4fbdf760e01b8152600060048201526024016101d3565b6105bd816105ed565b50565b6000546001600160a01b0316331461017c5760405163118cdaa760e01b81523360048201526024016101d3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008261064a8584610653565b14949350505050565b600081815b84518110156106985761068482868381518110610677576106776107ed565b60200260200101516106a0565b91508061069081610803565b915050610658565b509392505050565b60008183106106bc5760008281526020849052604090206106cb565b60008381526020839052604090205b9392505050565b80356001600160a01b03811681146106e957600080fd5b919050565b60006020828403121561070057600080fd5b6106cb826106d2565b60008060006040848603121561071e57600080fd5b83359250602084013567ffffffffffffffff8082111561073d57600080fd5b818601915086601f83011261075157600080fd5b81358181111561076057600080fd5b8760208260051b850101111561077557600080fd5b6020830194508093505050509250925092565b6000806040838503121561079b57600080fd5b6107a4836106d2565b946020939093013593505050565b6000602082840312156107c457600080fd5b815180151581146106cb57600080fd5b6000602082840312156107e657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161082357634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220960731e2f7693987d8460e1e8431d885548617d3af44dbe191285164cdc6a99664736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x981 CODESIZE SUB DUP1 PUSH2 0x981 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0xD8 JUMP JUMPDEST CALLER DUP1 PUSH2 0x55 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E DUP2 PUSH2 0x88 JUMP JUMPDEST POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 SSTORE PUSH2 0x112 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x102 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH2 0x860 DUP1 PUSH2 0x121 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x9A114CB2 EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0x9E281A98 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x49590657 EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0x73B2E80E EQ PUSH2 0xC6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA1 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xA1 JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x16A JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE9 PUSH2 0xD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EE JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAB JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x709 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x788 JUMP JUMPDEST PUSH2 0x3B0 JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x152 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EE JUMP JUMPDEST PUSH2 0x582 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x106 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x172 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x17C PUSH1 0x0 PUSH2 0x5ED JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x151BDAD95B9CC8185B1C9958591E4818DB185A5B5959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x25D DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0x63D JUMP JUMPDEST PUSH2 0x2A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x24B73B30B634B21026B2B935B63290383937B7B3 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D3 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x331 SWAP2 SWAP1 PUSH2 0x7B2 JUMP JUMPDEST PUSH2 0x375 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151BDAD95B881D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE CALLER SWAP1 PUSH32 0x896E034966EAAF1ADC54ACC0F257056FEBBD300C9E47182CF761982CF1F5E430 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x3B8 PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x40E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964204552432D323020746F6B656E206164647265737300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x456 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x47A SWAP2 SWAP1 PUSH2 0x7D4 JUMP JUMPDEST LT ISZERO PUSH2 0x4C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E6365000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x515 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x539 SWAP2 SWAP1 PUSH2 0x7B2 JUMP JUMPDEST PUSH2 0x57D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151BDAD95B881D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x58A PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5B4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1D3 JUMP JUMPDEST PUSH2 0x5BD DUP2 PUSH2 0x5ED JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x17C JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1D3 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x64A DUP6 DUP5 PUSH2 0x653 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x698 JUMPI PUSH2 0x684 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x677 JUMPI PUSH2 0x677 PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6A0 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x690 DUP2 PUSH2 0x803 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x658 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x6BC JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x700 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6CB DUP3 PUSH2 0x6D2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x71E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x760 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x79B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7A4 DUP4 PUSH2 0x6D2 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x6CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x823 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 SMOD BALANCE 0xE2 0xF7 PUSH10 0x3987D8460E1E8431D885 SLOAD DUP7 OR 0xD3 0xAF PREVRANDAO 0xDB 0xE1 SWAP2 0x28 MLOAD PUSH5 0xCDC6A99664 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"259:2047:4:-:0;;;532:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;588:10;;1269:95:0;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;530:51:5;503:18;;1322:31:0;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;610:5:4::1;:14:::0;;-1:-1:-1;;;;;;610:14:4::1;-1:-1:-1::0;;;;;610:14:4;;;::::1;::::0;;;::::1;::::0;;;634:10:::1;:24:::0;259:2047;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:365:5:-;107:6;115;168:2;156:9;147:7;143:23;139:32;136:52;;;184:1;181;174:12;136:52;210:16;;-1:-1:-1;;;;;255:31:5;;245:42;;235:70;;301:1;298;291:12;235:70;369:2;354:18;;;;348:25;324:5;;348:25;;-1:-1:-1;;;14:365:5:o;384:203::-;259:2047:4;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_84":{"entryPoint":1472,"id":84,"parameterSlots":0,"returnSlots":0},"@_efficientHash_791":{"entryPoint":null,"id":791,"parameterSlots":2,"returnSlots":1},"@_hashPair_779":{"entryPoint":1696,"id":779,"parameterSlots":2,"returnSlots":1},"@_msgSender_237":{"entryPoint":null,"id":237,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":1517,"id":146,"parameterSlots":1,"returnSlots":0},"@claimTokens_897":{"entryPoint":382,"id":897,"parameterSlots":3,"returnSlots":0},"@getMerkleRoot_955":{"entryPoint":null,"id":955,"parameterSlots":0,"returnSlots":1},"@hasClaimed_808":{"entryPoint":null,"id":808,"parameterSlots":0,"returnSlots":0},"@merkleRoot_804":{"entryPoint":null,"id":804,"parameterSlots":0,"returnSlots":0},"@owner_67":{"entryPoint":null,"id":67,"parameterSlots":0,"returnSlots":1},"@processProof_343":{"entryPoint":1619,"id":343,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_98":{"entryPoint":362,"id":98,"parameterSlots":0,"returnSlots":0},"@token_802":{"entryPoint":null,"id":802,"parameterSlots":0,"returnSlots":0},"@transferOwnership_126":{"entryPoint":1410,"id":126,"parameterSlots":1,"returnSlots":0},"@verify_282":{"entryPoint":1597,"id":282,"parameterSlots":3,"returnSlots":1},"@withdrawToken_947":{"entryPoint":944,"id":947,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":1746,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1774,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":1928,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":1970,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":2004,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":1801,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$225__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8962e84a0fe1dc8bc8e99b98167ffc97f36dc867633c236c04dbcaebcfcef536__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c0b89f4fb2200cb971cc72da0b4203780034112e935423892813b2b23e72a14b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cfff98aea1f4314a786c0426b520c2e5600fd9bdeb9d59d5d51311c13153d3c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":2051,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":2029,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5493:5","statements":[{"nodeType":"YulBlock","src":"6:3:5","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:5","statements":[{"nodeType":"YulAssignment","src":"125:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:5"},"nodeType":"YulFunctionCall","src":"133:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:5"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:5"},"nodeType":"YulFunctionCall","src":"160:25:5"},"nodeType":"YulExpressionStatement","src":"160:25:5"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:5","type":""}],"src":"14:177:5"},{"body":{"nodeType":"YulBlock","src":"245:124:5","statements":[{"nodeType":"YulAssignment","src":"255:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"277:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"264:12:5"},"nodeType":"YulFunctionCall","src":"264:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"255:5:5"}]},{"body":{"nodeType":"YulBlock","src":"347:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"356:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"359:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"349:6:5"},"nodeType":"YulFunctionCall","src":"349:12:5"},"nodeType":"YulExpressionStatement","src":"349:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"306:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"317:5:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"332:3:5","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"337:1:5","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"328:3:5"},"nodeType":"YulFunctionCall","src":"328:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"341:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"324:3:5"},"nodeType":"YulFunctionCall","src":"324:19:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"313:3:5"},"nodeType":"YulFunctionCall","src":"313:31:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"303:2:5"},"nodeType":"YulFunctionCall","src":"303:42:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"296:6:5"},"nodeType":"YulFunctionCall","src":"296:50:5"},"nodeType":"YulIf","src":"293:70:5"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"224:6:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"235:5:5","type":""}],"src":"196:173:5"},{"body":{"nodeType":"YulBlock","src":"444:116:5","statements":[{"body":{"nodeType":"YulBlock","src":"490:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"499:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"502:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"492:6:5"},"nodeType":"YulFunctionCall","src":"492:12:5"},"nodeType":"YulExpressionStatement","src":"492:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"465:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"474:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"461:3:5"},"nodeType":"YulFunctionCall","src":"461:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"486:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"457:3:5"},"nodeType":"YulFunctionCall","src":"457:32:5"},"nodeType":"YulIf","src":"454:52:5"},{"nodeType":"YulAssignment","src":"515:39:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"544:9:5"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"525:18:5"},"nodeType":"YulFunctionCall","src":"525:29:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"515:6:5"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"410:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"421:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"433:6:5","type":""}],"src":"374:186:5"},{"body":{"nodeType":"YulBlock","src":"660:92:5","statements":[{"nodeType":"YulAssignment","src":"670:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"682:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"693:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"678:3:5"},"nodeType":"YulFunctionCall","src":"678:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"670:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"712:9:5"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"737:6:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"730:6:5"},"nodeType":"YulFunctionCall","src":"730:14:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"723:6:5"},"nodeType":"YulFunctionCall","src":"723:22:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"705:6:5"},"nodeType":"YulFunctionCall","src":"705:41:5"},"nodeType":"YulExpressionStatement","src":"705:41:5"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"629:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"640:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"651:4:5","type":""}],"src":"565:187:5"},{"body":{"nodeType":"YulBlock","src":"858:102:5","statements":[{"nodeType":"YulAssignment","src":"868:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"880:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"891:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"876:3:5"},"nodeType":"YulFunctionCall","src":"876:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"868:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"910:9:5"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"925:6:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"941:3:5","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"946:1:5","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"937:3:5"},"nodeType":"YulFunctionCall","src":"937:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"950:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"933:3:5"},"nodeType":"YulFunctionCall","src":"933:19:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"921:3:5"},"nodeType":"YulFunctionCall","src":"921:32:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"903:6:5"},"nodeType":"YulFunctionCall","src":"903:51:5"},"nodeType":"YulExpressionStatement","src":"903:51:5"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"827:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"838:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"849:4:5","type":""}],"src":"757:203:5"},{"body":{"nodeType":"YulBlock","src":"1087:561:5","statements":[{"body":{"nodeType":"YulBlock","src":"1133:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1142:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1145:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1135:6:5"},"nodeType":"YulFunctionCall","src":"1135:12:5"},"nodeType":"YulExpressionStatement","src":"1135:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1108:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"1117:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1104:3:5"},"nodeType":"YulFunctionCall","src":"1104:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"1129:2:5","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1100:3:5"},"nodeType":"YulFunctionCall","src":"1100:32:5"},"nodeType":"YulIf","src":"1097:52:5"},{"nodeType":"YulAssignment","src":"1158:33:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1181:9:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1168:12:5"},"nodeType":"YulFunctionCall","src":"1168:23:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1158:6:5"}]},{"nodeType":"YulVariableDeclaration","src":"1200:46:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1231:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1242:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1227:3:5"},"nodeType":"YulFunctionCall","src":"1227:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1214:12:5"},"nodeType":"YulFunctionCall","src":"1214:32:5"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1204:6:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1255:28:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1265:18:5","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1259:2:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"1310:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1319:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1322:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1312:6:5"},"nodeType":"YulFunctionCall","src":"1312:12:5"},"nodeType":"YulExpressionStatement","src":"1312:12:5"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1298:6:5"},{"name":"_1","nodeType":"YulIdentifier","src":"1306:2:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1295:2:5"},"nodeType":"YulFunctionCall","src":"1295:14:5"},"nodeType":"YulIf","src":"1292:34:5"},{"nodeType":"YulVariableDeclaration","src":"1335:32:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1349:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1360:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1345:3:5"},"nodeType":"YulFunctionCall","src":"1345:22:5"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1339:2:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"1415:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1424:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1427:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1417:6:5"},"nodeType":"YulFunctionCall","src":"1417:12:5"},"nodeType":"YulExpressionStatement","src":"1417:12:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1394:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"1398:4:5","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1390:3:5"},"nodeType":"YulFunctionCall","src":"1390:13:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1405:7:5"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1386:3:5"},"nodeType":"YulFunctionCall","src":"1386:27:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1379:6:5"},"nodeType":"YulFunctionCall","src":"1379:35:5"},"nodeType":"YulIf","src":"1376:55:5"},{"nodeType":"YulVariableDeclaration","src":"1440:30:5","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1467:2:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1454:12:5"},"nodeType":"YulFunctionCall","src":"1454:16:5"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1444:6:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"1497:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1506:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1509:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1499:6:5"},"nodeType":"YulFunctionCall","src":"1499:12:5"},"nodeType":"YulExpressionStatement","src":"1499:12:5"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1485:6:5"},{"name":"_1","nodeType":"YulIdentifier","src":"1493:2:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1482:2:5"},"nodeType":"YulFunctionCall","src":"1482:14:5"},"nodeType":"YulIf","src":"1479:34:5"},{"body":{"nodeType":"YulBlock","src":"1571:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1580:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1583:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1573:6:5"},"nodeType":"YulFunctionCall","src":"1573:12:5"},"nodeType":"YulExpressionStatement","src":"1573:12:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1536:2:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1544:1:5","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1547:6:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1540:3:5"},"nodeType":"YulFunctionCall","src":"1540:14:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1532:3:5"},"nodeType":"YulFunctionCall","src":"1532:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"1557:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1528:3:5"},"nodeType":"YulFunctionCall","src":"1528:32:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1562:7:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1525:2:5"},"nodeType":"YulFunctionCall","src":"1525:45:5"},"nodeType":"YulIf","src":"1522:65:5"},{"nodeType":"YulAssignment","src":"1596:21:5","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1610:2:5"},{"kind":"number","nodeType":"YulLiteral","src":"1614:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1606:3:5"},"nodeType":"YulFunctionCall","src":"1606:11:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1596:6:5"}]},{"nodeType":"YulAssignment","src":"1626:16:5","value":{"name":"length","nodeType":"YulIdentifier","src":"1636:6:5"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1626:6:5"}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1037:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1048:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1060:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1068:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1076:6:5","type":""}],"src":"965:683:5"},{"body":{"nodeType":"YulBlock","src":"1740:167:5","statements":[{"body":{"nodeType":"YulBlock","src":"1786:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1795:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1798:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1788:6:5"},"nodeType":"YulFunctionCall","src":"1788:12:5"},"nodeType":"YulExpressionStatement","src":"1788:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1761:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"1770:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1757:3:5"},"nodeType":"YulFunctionCall","src":"1757:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"1782:2:5","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1753:3:5"},"nodeType":"YulFunctionCall","src":"1753:32:5"},"nodeType":"YulIf","src":"1750:52:5"},{"nodeType":"YulAssignment","src":"1811:39:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1840:9:5"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1821:18:5"},"nodeType":"YulFunctionCall","src":"1821:29:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1811:6:5"}]},{"nodeType":"YulAssignment","src":"1859:42:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1886:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1897:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1882:3:5"},"nodeType":"YulFunctionCall","src":"1882:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1869:12:5"},"nodeType":"YulFunctionCall","src":"1869:32:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1859:6:5"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1698:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1709:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1721:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1729:6:5","type":""}],"src":"1653:254:5"},{"body":{"nodeType":"YulBlock","src":"2027:102:5","statements":[{"nodeType":"YulAssignment","src":"2037:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2049:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2060:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2045:3:5"},"nodeType":"YulFunctionCall","src":"2045:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2037:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2079:9:5"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2094:6:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2110:3:5","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2115:1:5","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2106:3:5"},"nodeType":"YulFunctionCall","src":"2106:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"2119:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2102:3:5"},"nodeType":"YulFunctionCall","src":"2102:19:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2090:3:5"},"nodeType":"YulFunctionCall","src":"2090:32:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2072:6:5"},"nodeType":"YulFunctionCall","src":"2072:51:5"},"nodeType":"YulExpressionStatement","src":"2072:51:5"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$225__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1996:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2007:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2018:4:5","type":""}],"src":"1912:217:5"},{"body":{"nodeType":"YulBlock","src":"2308:172:5","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2325:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2336:2:5","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2318:6:5"},"nodeType":"YulFunctionCall","src":"2318:21:5"},"nodeType":"YulExpressionStatement","src":"2318:21:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2359:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2370:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2355:3:5"},"nodeType":"YulFunctionCall","src":"2355:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"2375:2:5","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2348:6:5"},"nodeType":"YulFunctionCall","src":"2348:30:5"},"nodeType":"YulExpressionStatement","src":"2348:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2398:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2409:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2394:3:5"},"nodeType":"YulFunctionCall","src":"2394:18:5"},{"hexValue":"546f6b656e7320616c726561647920636c61696d6564","kind":"string","nodeType":"YulLiteral","src":"2414:24:5","type":"","value":"Tokens already claimed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2387:6:5"},"nodeType":"YulFunctionCall","src":"2387:52:5"},"nodeType":"YulExpressionStatement","src":"2387:52:5"},{"nodeType":"YulAssignment","src":"2448:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2460:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2471:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2456:3:5"},"nodeType":"YulFunctionCall","src":"2456:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2448:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_c0b89f4fb2200cb971cc72da0b4203780034112e935423892813b2b23e72a14b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2285:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2299:4:5","type":""}],"src":"2134:346:5"},{"body":{"nodeType":"YulBlock","src":"2632:147:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2649:3:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2662:2:5","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"2666:6:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2658:3:5"},"nodeType":"YulFunctionCall","src":"2658:15:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2679:26:5","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2675:3:5"},"nodeType":"YulFunctionCall","src":"2675:31:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2654:3:5"},"nodeType":"YulFunctionCall","src":"2654:53:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2642:6:5"},"nodeType":"YulFunctionCall","src":"2642:66:5"},"nodeType":"YulExpressionStatement","src":"2642:66:5"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2728:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"2733:2:5","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2724:3:5"},"nodeType":"YulFunctionCall","src":"2724:12:5"},{"name":"value1","nodeType":"YulIdentifier","src":"2738:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2717:6:5"},"nodeType":"YulFunctionCall","src":"2717:28:5"},"nodeType":"YulExpressionStatement","src":"2717:28:5"},{"nodeType":"YulAssignment","src":"2754:19:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2765:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"2770:2:5","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2761:3:5"},"nodeType":"YulFunctionCall","src":"2761:12:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2754:3:5"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2600:3:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2605:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2613:6:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2624:3:5","type":""}],"src":"2485:294:5"},{"body":{"nodeType":"YulBlock","src":"2958:170:5","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2975:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2986:2:5","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2968:6:5"},"nodeType":"YulFunctionCall","src":"2968:21:5"},"nodeType":"YulExpressionStatement","src":"2968:21:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3009:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3020:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3005:3:5"},"nodeType":"YulFunctionCall","src":"3005:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"3025:2:5","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2998:6:5"},"nodeType":"YulFunctionCall","src":"2998:30:5"},"nodeType":"YulExpressionStatement","src":"2998:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3048:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3059:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3044:3:5"},"nodeType":"YulFunctionCall","src":"3044:18:5"},{"hexValue":"496e76616c6964204d65726b6c652070726f6f66","kind":"string","nodeType":"YulLiteral","src":"3064:22:5","type":"","value":"Invalid Merkle proof"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3037:6:5"},"nodeType":"YulFunctionCall","src":"3037:50:5"},"nodeType":"YulExpressionStatement","src":"3037:50:5"},{"nodeType":"YulAssignment","src":"3096:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3108:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3119:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3104:3:5"},"nodeType":"YulFunctionCall","src":"3104:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3096:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_cfff98aea1f4314a786c0426b520c2e5600fd9bdeb9d59d5d51311c13153d3c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2935:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2949:4:5","type":""}],"src":"2784:344:5"},{"body":{"nodeType":"YulBlock","src":"3262:145:5","statements":[{"nodeType":"YulAssignment","src":"3272:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3284:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3295:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3280:3:5"},"nodeType":"YulFunctionCall","src":"3280:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3272:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3314:9:5"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3329:6:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3345:3:5","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3350:1:5","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3341:3:5"},"nodeType":"YulFunctionCall","src":"3341:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"3354:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3337:3:5"},"nodeType":"YulFunctionCall","src":"3337:19:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3325:3:5"},"nodeType":"YulFunctionCall","src":"3325:32:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3307:6:5"},"nodeType":"YulFunctionCall","src":"3307:51:5"},"nodeType":"YulExpressionStatement","src":"3307:51:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3378:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3389:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3374:3:5"},"nodeType":"YulFunctionCall","src":"3374:18:5"},{"name":"value1","nodeType":"YulIdentifier","src":"3394:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3367:6:5"},"nodeType":"YulFunctionCall","src":"3367:34:5"},"nodeType":"YulExpressionStatement","src":"3367:34:5"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3223:9:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3234:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3242:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3253:4:5","type":""}],"src":"3133:274:5"},{"body":{"nodeType":"YulBlock","src":"3490:199:5","statements":[{"body":{"nodeType":"YulBlock","src":"3536:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3545:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3548:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3538:6:5"},"nodeType":"YulFunctionCall","src":"3538:12:5"},"nodeType":"YulExpressionStatement","src":"3538:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3511:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"3520:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3507:3:5"},"nodeType":"YulFunctionCall","src":"3507:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"3532:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3503:3:5"},"nodeType":"YulFunctionCall","src":"3503:32:5"},"nodeType":"YulIf","src":"3500:52:5"},{"nodeType":"YulVariableDeclaration","src":"3561:29:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3580:9:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3574:5:5"},"nodeType":"YulFunctionCall","src":"3574:16:5"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3565:5:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"3643:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3652:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3655:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3645:6:5"},"nodeType":"YulFunctionCall","src":"3645:12:5"},"nodeType":"YulExpressionStatement","src":"3645:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3612:5:5"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3633:5:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3626:6:5"},"nodeType":"YulFunctionCall","src":"3626:13:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3619:6:5"},"nodeType":"YulFunctionCall","src":"3619:21:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3609:2:5"},"nodeType":"YulFunctionCall","src":"3609:32:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3602:6:5"},"nodeType":"YulFunctionCall","src":"3602:40:5"},"nodeType":"YulIf","src":"3599:60:5"},{"nodeType":"YulAssignment","src":"3668:15:5","value":{"name":"value","nodeType":"YulIdentifier","src":"3678:5:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3668:6:5"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3456:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3467:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3479:6:5","type":""}],"src":"3412:277:5"},{"body":{"nodeType":"YulBlock","src":"3868:171:5","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3885:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3896:2:5","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3878:6:5"},"nodeType":"YulFunctionCall","src":"3878:21:5"},"nodeType":"YulExpressionStatement","src":"3878:21:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3919:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3930:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3915:3:5"},"nodeType":"YulFunctionCall","src":"3915:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"3935:2:5","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3908:6:5"},"nodeType":"YulFunctionCall","src":"3908:30:5"},"nodeType":"YulExpressionStatement","src":"3908:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3958:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3969:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3954:3:5"},"nodeType":"YulFunctionCall","src":"3954:18:5"},{"hexValue":"546f6b656e207472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"3974:23:5","type":"","value":"Token transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3947:6:5"},"nodeType":"YulFunctionCall","src":"3947:51:5"},"nodeType":"YulExpressionStatement","src":"3947:51:5"},{"nodeType":"YulAssignment","src":"4007:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4019:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4030:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4015:3:5"},"nodeType":"YulFunctionCall","src":"4015:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4007:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3845:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3859:4:5","type":""}],"src":"3694:345:5"},{"body":{"nodeType":"YulBlock","src":"4145:76:5","statements":[{"nodeType":"YulAssignment","src":"4155:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4167:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4178:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4163:3:5"},"nodeType":"YulFunctionCall","src":"4163:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4155:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4197:9:5"},{"name":"value0","nodeType":"YulIdentifier","src":"4208:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4190:6:5"},"nodeType":"YulFunctionCall","src":"4190:25:5"},"nodeType":"YulExpressionStatement","src":"4190:25:5"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4114:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4125:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4136:4:5","type":""}],"src":"4044:177:5"},{"body":{"nodeType":"YulBlock","src":"4400:178:5","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4417:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4428:2:5","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4410:6:5"},"nodeType":"YulFunctionCall","src":"4410:21:5"},"nodeType":"YulExpressionStatement","src":"4410:21:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4451:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4462:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4447:3:5"},"nodeType":"YulFunctionCall","src":"4447:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"4467:2:5","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4440:6:5"},"nodeType":"YulFunctionCall","src":"4440:30:5"},"nodeType":"YulExpressionStatement","src":"4440:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4490:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4501:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4486:3:5"},"nodeType":"YulFunctionCall","src":"4486:18:5"},{"hexValue":"496e76616c6964204552432d323020746f6b656e2061646472657373","kind":"string","nodeType":"YulLiteral","src":"4506:30:5","type":"","value":"Invalid ERC-20 token address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4479:6:5"},"nodeType":"YulFunctionCall","src":"4479:58:5"},"nodeType":"YulExpressionStatement","src":"4479:58:5"},{"nodeType":"YulAssignment","src":"4546:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4558:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4569:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4554:3:5"},"nodeType":"YulFunctionCall","src":"4554:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4546:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_8962e84a0fe1dc8bc8e99b98167ffc97f36dc867633c236c04dbcaebcfcef536__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4377:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4391:4:5","type":""}],"src":"4226:352:5"},{"body":{"nodeType":"YulBlock","src":"4664:103:5","statements":[{"body":{"nodeType":"YulBlock","src":"4710:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4719:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4722:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4712:6:5"},"nodeType":"YulFunctionCall","src":"4712:12:5"},"nodeType":"YulExpressionStatement","src":"4712:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4685:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"4694:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4681:3:5"},"nodeType":"YulFunctionCall","src":"4681:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"4706:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4677:3:5"},"nodeType":"YulFunctionCall","src":"4677:32:5"},"nodeType":"YulIf","src":"4674:52:5"},{"nodeType":"YulAssignment","src":"4735:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4751:9:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4745:5:5"},"nodeType":"YulFunctionCall","src":"4745:16:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4735:6:5"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4630:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4641:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4653:6:5","type":""}],"src":"4583:184:5"},{"body":{"nodeType":"YulBlock","src":"4946:176:5","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4963:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4974:2:5","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4956:6:5"},"nodeType":"YulFunctionCall","src":"4956:21:5"},"nodeType":"YulExpressionStatement","src":"4956:21:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4997:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5008:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4993:3:5"},"nodeType":"YulFunctionCall","src":"4993:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"5013:2:5","type":"","value":"26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4986:6:5"},"nodeType":"YulFunctionCall","src":"4986:30:5"},"nodeType":"YulExpressionStatement","src":"4986:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5036:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5047:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5032:3:5"},"nodeType":"YulFunctionCall","src":"5032:18:5"},{"hexValue":"496e73756666696369656e7420746f6b656e2062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"5052:28:5","type":"","value":"Insufficient token balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5025:6:5"},"nodeType":"YulFunctionCall","src":"5025:56:5"},"nodeType":"YulExpressionStatement","src":"5025:56:5"},{"nodeType":"YulAssignment","src":"5090:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5102:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5113:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5098:3:5"},"nodeType":"YulFunctionCall","src":"5098:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5090:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4923:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4937:4:5","type":""}],"src":"4772:350:5"},{"body":{"nodeType":"YulBlock","src":"5159:95:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5176:1:5","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5183:3:5","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5188:10:5","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5179:3:5"},"nodeType":"YulFunctionCall","src":"5179:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5169:6:5"},"nodeType":"YulFunctionCall","src":"5169:31:5"},"nodeType":"YulExpressionStatement","src":"5169:31:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5216:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5219:4:5","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5209:6:5"},"nodeType":"YulFunctionCall","src":"5209:15:5"},"nodeType":"YulExpressionStatement","src":"5209:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5240:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5243:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5233:6:5"},"nodeType":"YulFunctionCall","src":"5233:15:5"},"nodeType":"YulExpressionStatement","src":"5233:15:5"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"5127:127:5"},{"body":{"nodeType":"YulBlock","src":"5306:185:5","statements":[{"body":{"nodeType":"YulBlock","src":"5345:111:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5366:1:5","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5373:3:5","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5378:10:5","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5369:3:5"},"nodeType":"YulFunctionCall","src":"5369:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5359:6:5"},"nodeType":"YulFunctionCall","src":"5359:31:5"},"nodeType":"YulExpressionStatement","src":"5359:31:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5410:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5413:4:5","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5403:6:5"},"nodeType":"YulFunctionCall","src":"5403:15:5"},"nodeType":"YulExpressionStatement","src":"5403:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5438:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5441:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5431:6:5"},"nodeType":"YulFunctionCall","src":"5431:15:5"},"nodeType":"YulExpressionStatement","src":"5431:15:5"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5322:5:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5333:1:5","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5329:3:5"},"nodeType":"YulFunctionCall","src":"5329:6:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5319:2:5"},"nodeType":"YulFunctionCall","src":"5319:17:5"},"nodeType":"YulIf","src":"5316:140:5"},{"nodeType":"YulAssignment","src":"5465:20:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5476:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"5483:1:5","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5472:3:5"},"nodeType":"YulFunctionCall","src":"5472:13:5"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5465:3:5"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5288:5:5","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5298:3:5","type":""}],"src":"5259:232:5"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$225__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_c0b89f4fb2200cb971cc72da0b4203780034112e935423892813b2b23e72a14b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Tokens already claimed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_stringliteral_cfff98aea1f4314a786c0426b520c2e5600fd9bdeb9d59d5d51311c13153d3c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Invalid Merkle proof\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Token transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_8962e84a0fe1dc8bc8e99b98167ffc97f36dc867633c236c04dbcaebcfcef536__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Invalid ERC-20 token address\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_a7e5e4d46ea524835ea36125140e247d59a2bce707f2094f88605dba8157d192__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Insufficient token balance\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}","id":5,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100f95780639a114cb21461011e5780639e281a9814610131578063f2fde38b14610144578063fc0c546a1461015757600080fd5b80632eb4a7ab1461009857806349590657146100b4578063715018a6146100bc57806373b2e80e146100c6575b600080fd5b6100a160025481565b6040519081526020015b60405180910390f35b6002546100a1565b6100c461016a565b005b6100e96100d43660046106ee565b60036020526000908152604090205460ff1681565b60405190151581526020016100ab565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100ab565b6100c461012c366004610709565b61017e565b6100c461013f366004610788565b6103b0565b6100c46101523660046106ee565b610582565b600154610106906001600160a01b031681565b6101726105c0565b61017c60006105ed565b565b3360009081526003602052604090205460ff16156101dc5760405162461bcd60e51b8152602060048201526016602482015275151bdad95b9cc8185b1c9958591e4818db185a5b595960521b60448201526064015b60405180910390fd5b6040516bffffffffffffffffffffffff193360601b1660208201526034810184905260009060540160405160208183030381529060405280519060200120905061025d83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600254915084905061063d565b6102a05760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21026b2b935b63290383937b7b360611b60448201526064016101d3565b3360008181526003602052604090819020805460ff1916600190811790915554905163a9059cbb60e01b81526004810192909252602482018690526001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561030d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033191906107b2565b6103755760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016101d3565b60405184815233907f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4309060200160405180910390a250505050565b6103b86105c0565b6001600160a01b03821661040e5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964204552432d323020746f6b656e20616464726573730000000060448201526064016101d3565b6040516370a0823160e01b8152306004820152829082906001600160a01b038316906370a0823190602401602060405180830381865afa158015610456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047a91906107d4565b10156104c85760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e636500000000000060448201526064016101d3565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0382169063a9059cbb906044016020604051808303816000875af1158015610515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053991906107b2565b61057d5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016101d3565b505050565b61058a6105c0565b6001600160a01b0381166105b457604051631e4fbdf760e01b8152600060048201526024016101d3565b6105bd816105ed565b50565b6000546001600160a01b0316331461017c5760405163118cdaa760e01b81523360048201526024016101d3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008261064a8584610653565b14949350505050565b600081815b84518110156106985761068482868381518110610677576106776107ed565b60200260200101516106a0565b91508061069081610803565b915050610658565b509392505050565b60008183106106bc5760008281526020849052604090206106cb565b60008381526020839052604090205b9392505050565b80356001600160a01b03811681146106e957600080fd5b919050565b60006020828403121561070057600080fd5b6106cb826106d2565b60008060006040848603121561071e57600080fd5b83359250602084013567ffffffffffffffff8082111561073d57600080fd5b818601915086601f83011261075157600080fd5b81358181111561076057600080fd5b8760208260051b850101111561077557600080fd5b6020830194508093505050509250925092565b6000806040838503121561079b57600080fd5b6107a4836106d2565b946020939093013593505050565b6000602082840312156107c457600080fd5b815180151581146106cb57600080fd5b6000602082840312156107e657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161082357634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220960731e2f7693987d8460e1e8431d885548617d3af44dbe191285164cdc6a99664736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x9A114CB2 EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0x9E281A98 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x49590657 EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0x73B2E80E EQ PUSH2 0xC6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA1 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xA1 JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x16A JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE9 PUSH2 0xD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EE JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAB JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x12C CALLDATASIZE PUSH1 0x4 PUSH2 0x709 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x788 JUMP JUMPDEST PUSH2 0x3B0 JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x152 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EE JUMP JUMPDEST PUSH2 0x582 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x106 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x172 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x17C PUSH1 0x0 PUSH2 0x5ED JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x151BDAD95B9CC8185B1C9958591E4818DB185A5B5959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x25D DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0x63D JUMP JUMPDEST PUSH2 0x2A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x24B73B30B634B21026B2B935B63290383937B7B3 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D3 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x331 SWAP2 SWAP1 PUSH2 0x7B2 JUMP JUMPDEST PUSH2 0x375 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151BDAD95B881D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE CALLER SWAP1 PUSH32 0x896E034966EAAF1ADC54ACC0F257056FEBBD300C9E47182CF761982CF1F5E430 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x3B8 PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x40E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964204552432D323020746F6B656E206164647265737300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x456 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x47A SWAP2 SWAP1 PUSH2 0x7D4 JUMP JUMPDEST LT ISZERO PUSH2 0x4C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E2062616C616E6365000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x515 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x539 SWAP2 SWAP1 PUSH2 0x7B2 JUMP JUMPDEST PUSH2 0x57D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151BDAD95B881D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1D3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x58A PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5B4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1D3 JUMP JUMPDEST PUSH2 0x5BD DUP2 PUSH2 0x5ED JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x17C JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1D3 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x64A DUP6 DUP5 PUSH2 0x653 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x698 JUMPI PUSH2 0x684 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x677 JUMPI PUSH2 0x677 PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6A0 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x690 DUP2 PUSH2 0x803 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x658 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x6BC JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x700 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6CB DUP3 PUSH2 0x6D2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x71E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x760 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x79B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7A4 DUP4 PUSH2 0x6D2 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x6CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x823 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 SMOD BALANCE 0xE2 0xF7 PUSH10 0x3987D8460E1E8431D885 SLOAD DUP7 OR 0xD3 0xAF PREVRANDAO 0xDB 0xE1 SWAP2 0x28 MLOAD PUSH5 0xCDC6A99664 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"259:2047:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:25;;;;;;;;;160::5;;;148:2;133:18;321:25:4;;;;;;;;2213:91;2287:10;;2213:91;;2293:101:0;;;:::i;:::-;;352:42:4;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;730:14:5;;723:22;705:41;;693:2;678:18;352:42:4;565:187:5;1638:85:0;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;1638:85;;;-1:-1:-1;;;;;921:32:5;;;903:51;;891:2;876:18;1638:85:0;757:203:5;671:807:4;;;;;;:::i;:::-;;:::i;1484:677::-;;;;;;:::i;:::-;;:::i;2543:215:0:-;;;;;;:::i;:::-;;:::i;296:19:4:-;;;;;-1:-1:-1;;;;;296:19:4;;;2293:101:0;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;671:807:4:-;840:10;829:22;;;;:10;:22;;;;;;;;828:23;820:58;;;;-1:-1:-1;;;820:58:4;;2336:2:5;820:58:4;;;2318:21:5;2375:2;2355:18;;;2348:30;-1:-1:-1;;;2394:18:5;;;2387:52;2456:18;;820:58:4;;;;;;;;;1005:36;;-1:-1:-1;;1022:10:4;2662:2:5;2658:15;2654:53;1005:36:4;;;2642:66:5;2724:12;;;2717:28;;;980:12:4;;2761::5;;1005:36:4;;;;;;;;;;;;995:47;;;;;;980:62;;1120:49;1139:11;;1120:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1152:10:4;;;-1:-1:-1;1164:4:4;;-1:-1:-1;1120:18:4;:49::i;:::-;1112:82;;;;-1:-1:-1;;;1112:82:4;;2986:2:5;1112:82:4;;;2968:21:5;3025:2;3005:18;;;2998:30;-1:-1:-1;;;3044:18:5;;;3037:50;3104:18;;1112:82:4;2784:344:5;1112:82:4;1277:10;1266:22;;;;:10;:22;;;;;;;:29;;-1:-1:-1;;1266:29:4;1291:4;1266:29;;;;;;1362:5;:34;;-1:-1:-1;;;1362:34:4;;;;;3307:51:5;;;;3374:18;;;3367:34;;;-1:-1:-1;;;;;1362:5:4;;:14;;3280:18:5;;1362:34:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1354:68;;;;-1:-1:-1;;;1354:68:4;;3896:2:5;1354:68:4;;;3878:21:5;3935:2;3915:18;;;3908:30;-1:-1:-1;;;3954:18:5;;;3947:51;4015:18;;1354:68:4;3694:345:5;1354:68:4;1438:33;;160:25:5;;;1452:10:4;;1438:33;;148:2:5;133:18;1438:33:4;;;;;;;749:729;671:807;;;:::o;1484:677::-;1531:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;1602:24:4;::::1;1594:65;;;::::0;-1:-1:-1;;;1594:65:4;;4428:2:5;1594:65:4::1;::::0;::::1;4410:21:5::0;4467:2;4447:18;;;4440:30;4506;4486:18;;;4479:58;4554:18;;1594:65:4::1;4226:352:5::0;1594:65:4::1;1873:38;::::0;-1:-1:-1;;;1873:38:4;;1905:4:::1;1873:38;::::0;::::1;903:51:5::0;1769:10:4;;1915:6;;-1:-1:-1;;;;;1873:23:4;::::1;::::0;::::1;::::0;876:18:5;;1873:38:4::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;;1852:121;;;::::0;-1:-1:-1;;;1852:121:4;;4974:2:5;1852:121:4::1;::::0;::::1;4956:21:5::0;5013:2;4993:18;;;4986:30;5052:28;5032:18;;;5025:56;5098:18;;1852:121:4::1;4772:350:5::0;1852:121:4::1;2065:42;::::0;-1:-1:-1;;;2065:42:4;;2088:10:::1;2065:42;::::0;::::1;3307:51:5::0;3374:18;;;3367:34;;;-1:-1:-1;;;;;2065:22:4;::::1;::::0;::::1;::::0;3280:18:5;;2065:42:4::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2044:110;;;::::0;-1:-1:-1;;;2044:110:4;;3896:2:5;2044:110:4::1;::::0;::::1;3878:21:5::0;3935:2;3915:18;;;3908:30;-1:-1:-1;;;3954:18:5;;;3947:51;4015:18;;2044:110:4::1;3694:345:5::0;2044:110:4::1;1584:577;1484:677:::0;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;903:51:5::0;876:18;;2672:31:0::1;757:203:5::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;735:10:2;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:2;1901:40:0;;;903:51:5;876:18;;1901:40:0;757:203:5;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;1265:154:3:-;1356:4;1408;1379:25;1392:5;1399:4;1379:12;:25::i;:::-;:33;;1265:154;-1:-1:-1;;;;1265:154:3:o;1967:290::-;2050:7;2092:4;2050:7;2106:116;2130:5;:12;2126:1;:16;2106:116;;;2178:33;2188:12;2202:5;2208:1;2202:8;;;;;;;;:::i;:::-;;;;;;;2178:9;:33::i;:::-;2163:48;-1:-1:-1;2144:3:3;;;;:::i;:::-;;;;2106:116;;;-1:-1:-1;2238:12:3;1967:290;-1:-1:-1;;;1967:290:3:o;9229:147::-;9292:7;9322:1;9318;:5;:51;;9564:13;9655:15;;;9690:4;9683:15;;;9736:4;9720:21;;9318:51;;;9564:13;9655:15;;;9690:4;9683:15;;;9736:4;9720:21;;9326:20;9311:58;9229:147;-1:-1:-1;;;9229:147:3:o;196:173:5:-;264:20;;-1:-1:-1;;;;;313:31:5;;303:42;;293:70;;359:1;356;349:12;293:70;196:173;;;:::o;374:186::-;433:6;486:2;474:9;465:7;461:23;457:32;454:52;;;502:1;499;492:12;454:52;525:29;544:9;525:29;:::i;965:683::-;1060:6;1068;1076;1129:2;1117:9;1108:7;1104:23;1100:32;1097:52;;;1145:1;1142;1135:12;1097:52;1181:9;1168:23;1158:33;;1242:2;1231:9;1227:18;1214:32;1265:18;1306:2;1298:6;1295:14;1292:34;;;1322:1;1319;1312:12;1292:34;1360:6;1349:9;1345:22;1335:32;;1405:7;1398:4;1394:2;1390:13;1386:27;1376:55;;1427:1;1424;1417:12;1376:55;1467:2;1454:16;1493:2;1485:6;1482:14;1479:34;;;1509:1;1506;1499:12;1479:34;1562:7;1557:2;1547:6;1544:1;1540:14;1536:2;1532:23;1528:32;1525:45;1522:65;;;1583:1;1580;1573:12;1522:65;1614:2;1610;1606:11;1596:21;;1636:6;1626:16;;;;;965:683;;;;;:::o;1653:254::-;1721:6;1729;1782:2;1770:9;1761:7;1757:23;1753:32;1750:52;;;1798:1;1795;1788:12;1750:52;1821:29;1840:9;1821:29;:::i;:::-;1811:39;1897:2;1882:18;;;;1869:32;;-1:-1:-1;;;1653:254:5:o;3412:277::-;3479:6;3532:2;3520:9;3511:7;3507:23;3503:32;3500:52;;;3548:1;3545;3538:12;3500:52;3580:9;3574:16;3633:5;3626:13;3619:21;3612:5;3609:32;3599:60;;3655:1;3652;3645:12;4583:184;4653:6;4706:2;4694:9;4685:7;4681:23;4677:32;4674:52;;;4722:1;4719;4712:12;4674:52;-1:-1:-1;4745:16:5;;4583:184;-1:-1:-1;4583:184:5:o;5127:127::-;5188:10;5183:3;5179:20;5176:1;5169:31;5219:4;5216:1;5209:15;5243:4;5240:1;5233:15;5259:232;5298:3;5319:17;;;5316:140;;5378:10;5373:3;5369:20;5366:1;5359:31;5413:4;5410:1;5403:15;5441:4;5438:1;5431:15;5316:140;-1:-1:-1;5483:1:5;5472:13;;5259:232::o"},"methodIdentifiers":{"claimTokens(uint256,bytes32[])":"9a114cb2","getMerkleRoot()":"49590657","hasClaimed(address)":"73b2e80e","merkleRoot()":"2eb4a7ab","owner()":"8da5cb5b","renounceOwnership()":"715018a6","token()":"fc0c546a","transferOwnership(address)":"f2fde38b","withdrawToken(address,uint256)":"9e281a98"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/airdrop/AirdropHDT.sol\":\"AirdropHDT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5d3d47d35af4373743a559ea4b9b7ecfe4bab6f0703f410c1e59959b7966ac\",\"dweb:/ipfs/QmTHdoghh4WLu4yURjGEgRk162pcwwdsG52MPGa12GqnGR\"]},\"contracts/airdrop/AirdropHDT.sol\":{\"keccak256\":\"0xb92dc78fe3342dd07381a746005ae8a5e6ae15d26371bab7124e4ccbdac98c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49063539d65d4a52808994cea8b654b5f254a3d0c61460e47a58f7cf661d7457\",\"dweb:/ipfs/QmfVW9qKX99xHVPZPSXGVtof9R1UxHNGUbQCeXjK4q1st4\"]}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"contracts/airdrop/AirdropHDT.sol:AirdropHDT","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":802,"contract":"contracts/airdrop/AirdropHDT.sol:AirdropHDT","label":"token","offset":0,"slot":"1","type":"t_contract(IERC20)225"},{"astId":804,"contract":"contracts/airdrop/AirdropHDT.sol:AirdropHDT","label":"merkleRoot","offset":0,"slot":"2","type":"t_bytes32"},{"astId":808,"contract":"contracts/airdrop/AirdropHDT.sol:AirdropHDT","label":"hasClaimed","offset":0,"slot":"3","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IERC20)225":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"}}}}}}}}